name: Build & Deploy Backend

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install
        working-directory: ./backend

      - name: Build the backend
        run: npm run build
        working-directory: ./backend

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Build Docker image
        run: |
          IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/claude-backend:${{ github.sha }}"
          docker build -t "$IMAGE" .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
        working-directory: ./backend

      - name: ACR login
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}

      - name: Push Docker image
        run: |
          docker push "$IMAGE"

      - name: Deploy to Azure Container Apps
        run: |
          az containerapp update \
            --name ${{ secrets.AZURE_CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --image "$IMAGE"

      - name: Fetch app FQDN
        id: fqdn
        run: |
          FQDN=$(az containerapp show \
            --name ${{ secrets.AZURE_CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn -o tsv)
          echo "fqdn=$FQDN" >> $GITHUB_OUTPUT

      - name: Smoke test /health
        run: |
          set -e
          FQDN="${{ steps.fqdn.outputs.fqdn }}"
          echo "Probing https://$FQDN/health"
          for i in {1..30}; do
            STATUS=$(curl -sS -o /dev/null -w "%{http_code}" https://$FQDN/health || true)
            if [ "$STATUS" = "200" ]; then
              echo "Healthy"
              exit 0
            fi
            echo "Attempt $i/30: status=$STATUS"
            sleep 10
          done
          echo "App not healthy in time" >&2
          exit 1